// Function
@function createColourMap(
  $base,
  $contrast,
  $dark,
  $darker,
  $darkest,
  $light,
  $lighter,
  $lightest,
  $trans
) {
  @if ($base == #fff or $base == #000) {
    // tone don't exist with black or white
    $map: (
      base: $base,
      contrast: $contrast,
      trans: $trans,
    );
    @return $map;
  } @else if ($isDeepest == true and $isDeeper == true) {
    $map: (
      base: $base,
      contrast: $contrast,
      dark: $dark,
      darker: $darker,
      darkest: $darkest,
      light: $light,
      lighter: $lighter,
      lightest: $lightest,
      trans: $trans,
    );
    @return $map;
  } @else if ($isDeeper == true) {
    $map: (
      base: $base,
      contrast: $contrast,
      dark: $dark,
      darker: $darker,
      light: $light,
      lighter: $lighter,
      trans: $trans,
    );
    @return $map;
  } @else {
    $map: (
      base: $base,
      contrast: $contrast,
      dark: $dark,
      light: $light,
      trans: $trans,
    );
    @return $map;
  }
}

@mixin generateClass($color, $tone, $value, $dark: '') {
  @if ($tone == 'base') {
    $tone: '';
  } @else {
    $tone: '-' + $tone;
  }

  $colorUsed: var(--#{$color}#{$tone});
  $colorContrast: var(--#{$color}-contrast);

  // bg-primary-light for shade
  .#{$dark}bg-#{$color}#{$tone},
  .#{$dark}hover-bg-#{$color}#{$tone}:hover {
    background-color: $colorUsed !important;
    &.contrast-content {
      color: $colorContrast;
      *:not(.contrast-content),
      *:not(.contrast-all) {
        // not influenced by parent
        color: $colorContrast;
      }
    }

    &.contrast-content-important {
      color: $colorContrast !important;
      *:not(.contrast-content),
      *:not(.contrast-all) {
        // not influenced by parent
        color: $colorContrast !important;
      }
    }
    &.contrast-selection {
      *::selection {
        color: $colorContrast;
        background-color: $colorUsed;
      }
    }
    &.contrast-all {
      color: $colorContrast;
      *:not(.contrast-content),
      *:not(.contrast-all) {
        color: $colorContrast;
      }
      *::selection {
        color: $colorUsed;
        background-color: $colorContrast;
      }
    }
  }
  .active {
    &.active-color-#{$color}#{$tone},
    .active-color-#{$color}#{$tone} {
      color: $colorUsed !important;
    }
    &.active-fill-#{$color}#{$tone},
    .active-fill-#{$color}#{$tone} {
      fill: $colorUsed !important;
    }
    &.active-stroke-#{$color}#{$tone},
    .active-stroke-#{$color}#{$tone} {
      stroke: $colorUsed !important;
    }
  }
  .#{$dark}color-#{$color}#{$tone},
  .#{$dark}hover-color-#{$color}#{$tone}:hover {
    color: $colorUsed !important;
    * {
      color: $colorUsed !important;
    }
  }
  .#{$dark}border-#{$color}#{$tone},
  .#{$dark}hover-border-#{$color}#{$tone}:hover {
    border-color: $colorUsed !important;
  }
  .#{$dark}fill-#{$color}#{$tone},
  .#{$dark}hover-fill-#{$color}#{$tone}:hover {
    fill: $colorUsed !important;
  }
  .#{$dark}stroke-#{$color}#{$tone},
  .#{$dark}hover-stroke-#{$color}#{$tone}:hover {
    stroke: $colorUsed !important;
  }
  .#{$dark}afterNBefore-#{$color}#{$tone},
  .#{$dark}hover-afterNBefore-#{$color}#{$tone}:hover {
    &::before,
    &::after {
      background-color: $colorUsed !important;
    }
  }
  .#{$dark}gradient-#{$color}#{$tone} {
    background-image: linear-gradient(var(--#{$color}), $value);
  }
  .#{$dark}gradient-#{$color}#{$tone}-rotate {
    background-image: linear-gradient($gradient-rotation, var(--#{$color}), $value);
  }
  .#{$dark}selection-#{$color}#{$tone} {
    *::selection {
      background-color: $colorUsed;
    }
    &.contrast-selection {
      *::selection {
        color: $colorContrast;
      }
    }
  }
  .#{$dark}inner-bg-#{$color}#{$tone} {
    .item-bg {
      background-color: $colorUsed;
    }
  }
  .#{$dark}inner-#{$color}#{$tone}-important {
    color: $colorUsed !important;
    border-color: $colorUsed !important;
    fill: $colorUsed !important;
    * {
      color: $colorUsed !important;
      border-color: $colorUsed !important;
      fill: $colorUsed !important;
    }
  }
  .#{$dark}inner-stroke-#{$color}#{$tone}-important {
    stroke: $colorUsed !important;
    * {
      stroke: $colorUsed !important;
    }
  }
  .#{$dark}inner-#{$color}#{$tone} {
    color: $colorUsed;
    border-color: $colorUsed;
    fill: $colorUsed;
    &::before,
    &::after {
      background-color: $colorUsed !important;
    }
    * {
      color: $colorUsed;
      border-color: $colorUsed;
      fill: $colorUsed;
      &::before,
      &::after {
        background-color: $colorUsed !important;
      }
    }
    &.bg-inherit,
    .bg-inherit {
      background-color: $colorUsed !important;
    }

    &.hover-contrast:hover {
      color: $colorContrast;
      fill: $colorContrast;
      * {
        color: $colorContrast;
        fill: $colorContrast;
      }
    }
  }
}

@mixin initUsColors($us-color-global) {
  @each $keys, $values in $us-color-global {
    $base: #000;
    $contrast: null;
    $dark: null;
    $darker: null;
    $darkest: null;
    $light: null;
    $lighter: null;
    $lightest: null;
    $trans: null;

    @each $key, $color in $values {
      @if ($key) {
        @if ($key == 'base') {
          $base: $color;
        } @else if ($key == 'contrast') {
          $contrast: $color;
        } @else if ($key == 'dark') {
          $dark: $color;
        } @else if ($key == 'darker') {
          $darker: $color;
        } @else if ($key == 'darkest') {
          $darkest: $color;
        } @else if ($key == 'light') {
          $light: $color;
        } @else if ($key == 'lighter') {
          $lighter: $color;
        } @else if ($key == 'lightest') {
          $lightest: $color;
        } @else if ($key == 'trans') {
          $trans: $color;
        }
      }
    }

    // Set default colors (if they aren't set by the user)
    @if ($contrast == null) {
      $contrast: #fff;
    }
    @if ($dark == null) {
      $dark: darken($base, $color-dark);
    }
    @if ($darker == null) {
      $darker: darken($base, $color-darker);
    }
    @if ($darkest == null) {
      $darkest: darken($base, $color-darkest);
    }
    @if ($light == null) {
      $light: lighten($base, $color-light);
    }
    @if ($lighter == null) {
      $lighter: lighten($base, $color-lighter);
    }
    @if ($lightest == null) {
      $lightest: lighten($base, $color-lightest);
    }
    @if ($trans == null) {
      $trans: transparentize($base, $color-opacity);
    }

    :root {
      @each $tone,
        $value
          in createColourMap(
            $base,
            $contrast,
            $dark,
            $darker,
            $darkest,
            $light,
            $lighter,
            $lightest,
            $trans
          )
      {
        // Create root variables
        @if #{$tone} == 'base' {
          --#{$keys}: #{$value};
        } @else {
          --#{$keys}-#{$tone}: #{$value};
        }

        // Create classes
        @include generateClass($keys, $tone, $value);

        @if ($isUsingDarkTheme) {
          @media (prefers-color-scheme: dark) {
            body {
              // Keep priority on dark theme
              @include generateClass($keys, $tone, $value, 'dark-');
            }
          }
        }
      }
    }
  }
}

// Variables
$color-light: 12% !default;
$color-lighter: 15% !default;
$color-lightest: 18% !default;
$color-dark: 12% !default;
$color-darker: 15% !default;
$color-darkest: 18% !default;
$color-opacity: 0.3 !default;
$gradient-rotation: 200deg !default;

$isDeeper: true !default; // create lighter and darker
$isDeepest: true !default; // create lightest and darkest

$us-color-settings: map-remove(
  (
    x: x,
  ),
  x
) !default; // overriden by the user
$use-default-colors-map: true !default;
$use-default-default-map: true !default;
$use-default-base-map: true !default;
$use-default-gray-map: true !default;
$use-default-status-map: true !default;

$isUsingDarkTheme: false !default;

@if $use-default-colors-map {
  $temp-map: map-remove(
    (
      x: x,
    ),
    x
  ); // empty map
  @if $use-default-default-map {
    // Normally will be overwritten by the user
    $us-color-default: (
      'primary': (
        'base': #3880ff,
      ),
      'secondary': (
        'base': #0cd1e8,
        'contrast': #000,
      ),
      'tertiary': (
        'base': #7044ff,
      ),
    );
    $temp-map: $us-color-default;
  }

  @if $use-default-base-map {
    $us-color-base: (
      'white': (
        'base': #fff,
        'contrast': #000,
      ),
      'black': (
        'base': #000,
      ),
    );
    $temp-map: map-merge($temp-map, $us-color-base);
  }

  @if $use-default-gray-map {
    $us-color-shade: (
      'light': (
        'dark': #e0e0e0,
        'base': #f5f5f5,
        'contrast': #000,
      ),
      'medium': (
        'base': #bfbfbf,
        'contrast': #000,
      ),
      'dark': (
        'dark': #0e0e0e,
        'base': #191919,
      ),
    );
    $temp-map: map-merge($temp-map, $us-color-shade);
  }

  // Default color used by bootstrap
  @if $use-default-status-map {
    $us-color-status: (
      'danger': (
        'dark': #cc0000,
        'base': #ff4444,
      ),
      'warning': (
        'dark': #ff8800,
        'base': #ffbb33,
        'contrast': #000,
      ),
      'success': (
        'dark': #007e33,
        'base': #00c851,
      ),
      'info': (
        'dark': #0099cc,
        'base': #33b5e5,
      ),
      'disabled': (
        'base': #e0e0e0,
        'contrast': #ababab,
      ),
    );
    $temp-map: map-merge($temp-map, $us-color-status);
  }
  $us-color-global: map-merge($temp-map, $us-color-settings);
  @include initUsColors($us-color-global);
} @else {
  @include initUsColors($us-color-settings);
}
