// Init class
$isUsingDarkTheme: false !default;

// Create global variable
:root {
  @each $color, $tones in $us-colors {
    @each $tone, $value in $tones {
      @if #{$tone} == 'base' {
        --#{$color}: #{$value};
      } @else {
        --#{$color}-#{$tone}: #{$value};
      }
    }
  }
}

@mixin generateClass($color, $tone, $value, $dark: '') {
  @if ($tone == 'base') {
    $tone: '';
  } @else {
    $tone: '-' + $tone;
  }

  $colorUsed: var(--#{$color}#{$tone});
  $colorContrast: var(--#{$color}-contrast);

  // bg-primary-light for shade
  .#{$dark}bg-#{$color}#{$tone},
  .#{$dark}hover-bg-#{$color}#{$tone}:hover {
    background-color: $colorUsed !important;
    &.contrast-content {
      color: $colorContrast;
      *:not(.contrast-content),
      *:not(.contrast-all) {
        // not influanced by parent
        color: $colorContrast;
      }
    }
    &.contrast-content-important {
      color: $colorContrast !important;
      *:not(.contrast-content),
      *:not(.contrast-all) {
        // not influanced by parent
        color: $colorContrast !important;
      }
    }
    &.contrast-selection {
      *::selection {
        color: $colorContrast;
        background-color: $colorUsed;
      }
    }
    &.contrast-all {
      color: $colorContrast;
      *:not(.contrast-content),
      *:not(.contrast-all) {
        color: $colorContrast;
      }
      *::selection {
        color: $colorUsed;
        background-color: $colorContrast;
      }
    }
  }
  .#{$dark}color-#{$color}#{$tone},
  .#{$dark}hover-color-#{$color}#{$tone}:hover {
    color: $colorUsed !important;
    * {
      color: $colorUsed !important;
    }
  }
  .#{$dark}border-#{$color}#{$tone},
  .#{$dark}hover-border-#{$color}#{$tone}:hover {
    border-color: $colorUsed !important;
  }
  .#{$dark}fill-#{$color}#{$tone},
  .#{$dark}hover-fill-#{$color}#{$tone}:hover {
    fill: $colorUsed !important;
  }
  .#{$dark}stroke-#{$color}#{$tone},
  .#{$dark}hover-stroke-#{$color}#{$tone}:hover {
    fill: $colorUsed !important;
  }
  .#{$dark}afterNBefore-#{$color}#{$tone},
  .#{$dark}hover-afterNBefore-#{$color}#{$tone}:hover {
    &::before,
    &::after {
      background-color: $colorUsed !important;
    }
  }
  .#{$dark}gradient-#{$color}#{$tone} {
    background-image: linear-gradient(map-get(map-get($us-colors, $color), base), $value);
  }
  .#{$dark}gradient-#{$color}#{$tone}-rotate {
    background-image: linear-gradient(
      $gradient-rotation,
      map-get(map-get($us-colors, $color), base),
      $value
    );
  }
  .#{$dark}selection-#{$color}#{$tone} {
    *::selection {
      background-color: $colorUsed;
    }
    &.contrast-selection {
      *::selection {
        color: $colorContrast;
      }
    }
  }
  .#{$dark}inner-bg-#{$color}#{$tone} {
    .item-bg {
      background-color: $colorUsed;
    }
  }
  .#{$dark}inner-#{$color}#{$tone} {
    color: $colorUsed;
    border-color: $colorUsed;
    fill: $colorUsed;
    &::before,
    &::after {
      background-color: $colorUsed !important;
    }
    * {
      color: $colorUsed;
      border-color: $colorUsed;
      fill: $colorUsed;
      &::before,
      &::after {
        background-color: $colorUsed !important;
      }
    }
    &.bg-inherit,
    .bg-inherit {
      background-color: $colorUsed !important;
    }

    &.hover-contrast:hover {
      color: $colorContrast;
      fill: $colorContrast;
      * {
        color: $colorContrast;
        fill: $colorContrast;
      }
    }
  }
}

// Create classes
@each $color, $tones in $us-colors {
  @each $tone, $value in $tones {
    @include generateClass($color, $tone, $value);
  }
}

// Add dark theme
@if ($isUsingDarkTheme) {
  @media (prefers-color-scheme: dark) {
    @each $color, $tones in $us-colors {
      @each $tone, $value in $tones {
        @include generateClass($color, $tone, $value, 'dark-');
      }
    }
  }
}
