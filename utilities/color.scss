// Init class

// Create global variable
:root {
  @each $color, $tones in $us-colors {
    @each $tones, $value in $values {
      @if #{$tone} == 'base' {
        --#{$color}: #{$value};
      } @else {
        --#{$color}-#{$tones}: #{$value};
      }
    }
  }
}

// Create classes
@each $color, $tones in $us-colors {
  @each $tone, $value in $tones {
    @if ($tone == 'base') {
      // bg-primary for base color
      .bg-#{$color},
      .hover-bg-#{$color}:hover {
        background-color: $value !important; // Override bootstrap value
        &.contrast-content {
          color: map-get(map-get($us-colors, $color), contrast);
          * {
            color: map-get(map-get($us-colors, $color), contrast);
          }
        }
        &.contrast-selection {
          *::selection {
            color: map-get(map-get($us-colors, $color), contrast);
            background-color: $value;
          }
        }
        &.contrast-all {
          color: map-get(map-get($us-colors, $color), contrast);
          * {
            color: map-get(map-get($us-colors, $color), contrast);
          }
          *::selection {
            color: $value;
            background-color: map-get(map-get($us-colors, $color), contrast);
          }
        }
      }

      .color-#{$color},
      .hover-color-#{$color}:hover {
        color: $value !important;
        * {
          color: $value !important;
        }
      }
      .border-#{$color},
      .hover-border-#{$color}:hover {
        border-color: $value !important;
      }
      .fill-#{$color},
      .hover-fill-#{$color}:hover {
        fill: $value !important;
      }
      .stroke-#{$color},
      .hover-stroke-#{$color}:hover {
        color: $value !important;
      }
      .afterNBefore-#{$color},
      .hover-afterNBefore-#{$color}:hover {
        &::before,
        &::after {
          background-color: $value !important;
        }
      }
      .selection-#{$color} {
        *::selection {
          background-color: $value;
        }
        &.contrast-selection {
          *::selection {
            color: map-get(map-get($us-colors, $color), contrast);
          }
        }
      }
      .inner-bg-#{$color} {
        .item-bg {
          background-color: $value;
        }
      }
      .inner-#{$color} {
        color: $value;
        border-color: $value;
        fill: $value;
        &::before,
        &::after {
          background-color: $value !important;
        }
        * {
          color: $value;
          border-color: $value;
          fill: $value;
          &::before,
          &::after {
            background-color: $value !important;
          }
        }
        &.bg-inherit,
        .bg-inherit {
          background-color: $value !important;
        }
        &.hover-contrast:hover {
          color: map-get(map-get($us-colors, $color), contrast);
          fill: map-get(map-get($us-colors, $color), contrast);
          * {
            color: map-get(map-get($us-colors, $color), contrast);
            fill: map-get(map-get($us-colors, $color), contrast);
          }
        }
      }
    } @else {
      // bg-primary-light for shade
      .bg-#{$color}-#{$tone},
      .hover-bg-#{$color}-#{$tone}:hover {
        background-color: $value !important;
        &.contrast-content {
          color: map-get(map-get($us-colors, $color), contrast);
          * {
            color: map-get(map-get($us-colors, $color), contrast);
          }
        }
        &.contrast-selection {
          *::selection {
            color: map-get(map-get($us-colors, $color), contrast);
            background-color: $value;
          }
        }
        &.contrast-all {
          color: map-get(map-get($us-colors, $color), contrast);
          * {
            color: map-get(map-get($us-colors, $color), contrast);
          }
          *::selection {
            color: $value;
            background-color: map-get(map-get($us-colors, $color), contrast);
          }
        }
      }
      .color-#{$color}-#{$tone},
      .hover-color-#{$color}-#{$tone}:hover {
        color: $value !important;
        * {
          color: $value !important;
        }
      }
      .border-#{$color}-#{$tone},
      .hover-border-#{$color}-#{$tone}:hover {
        border-color: $value !important;
      }
      .fill-#{$color}-#{$tone},
      .hover-fill-#{$color}-#{$tone}:hover {
        fill: $value !important;
      }
      .stroke-#{$color}-#{$tone},
      .hover-stroke-#{$color}-#{$tone}:hover {
        fill: $value !important;
      }
      .afterNBefore-#{$color}-#{$tone},
      .hover-afterNBefore-#{$color}-#{$tone}:hover {
        &::before,
        &::after {
          background-color: $value !important;
        }
      }
      .gradient-#{$color}-#{$tone} {
        background-image: linear-gradient(map-get(map-get($us-colors, $color), base), $value);
      }
      .gradient-#{$color}-#{$tone}-rotate {
        background-image: linear-gradient(
          $gradient-rotation,
          map-get(map-get($us-colors, $color), base),
          $value
        );
      }
      .selection-#{$color}-#{$tone} {
        *::selection {
          background-color: $value;
        }
        &.contrast-selection {
          *::selection {
            color: map-get(map-get($us-colors, $color), contrast);
          }
        }
      }
      .inner-bg-#{$color}-#{$tone} {
        .item-bg {
          background-color: $value;
        }
      }
      .inner-#{$color}-#{$tone} {
        color: $value;
        border-color: $value;
        fill: $value;
        &::before,
        &::after {
          background-color: $value !important;
        }
        * {
          color: $value;
          border-color: $value;
          fill: $value;
          &::before,
          &::after {
            background-color: $value !important;
          }
        }
        &.bg-inherit,
        .bg-inherit {
          background-color: $value !important;
        }

        &.hover-contrast:hover {
          color: map-get(map-get($us-colors, $color), contrast);
          fill: map-get(map-get($us-colors, $color), contrast);
          * {
            color: map-get(map-get($us-colors, $color), contrast);
            fill: map-get(map-get($us-colors, $color), contrast);
          }
        }
      }
    }
  }
}
