/*
-- Exemple --
h1 {
  border: color();
  color: color('primary', 'light');
  background: color('secondary', 'light', 0.5);
}
*/

// Normally will be overwritten by the user
$us-color-settings: (
  primary: (
    base: #3880ff,
  ),
  secondary: (
    base: #0cd1e8,
  ),
  tertiary: (
    base: #7044ff,
  ),
  light: (
    base: #f4f5f8,
  ),
  medium: (
    base: #989aa2,
  ),
  dark: (
    base: #222428,
  ),
) !default;

// Default color used by bootstrap
$us-color-default: (
  'white': (
    base: #fff,
    contrast: #000,
  ),
  'black': (
    base: #000,
    contrast: #fff,
  ),
  danger: (
    dark: #cc0000,
    base: #ff4444,
    contrast: #fff,
  ),
  warning: (
    dark: #ff8800,
    base: #ffbb33,
    contrast: #000,
  ),
  success: (
    dark: #007e33,
    base: #00c851,
    contrast: #fff,
  ),
  info: (
    dark: #33b5e5,
    base: #0099cc,
    contrast: #fff,
  ),
) !default;

$us-color-global: map-merge($us-color-default, $us-color-settings) !default;

$color-light: 12% !default;
$color-lighter: 15% !default;
$color-lightest: 18% !default;
$color-dark: 12% !default;
$color-darker: 15% !default;
$color-darkest: 18% !default;
$color-opacity: 0.3 !default;
$gradient-rotation: 200deg !default;

$isDeeper: true !default; // create lighter and darker
$isDeepest: true !default; // create lightest and darkest

$us-colors: ();

@function createColourMap(
  $base,
  $contrast,
  $dark,
  $darker,
  $darkest,
  $light,
  $lighter,
  $lightest,
  $trans
) {
  @if ($base == #fff or $base == #000) {
    // tone don't exist with black or white
    $map: (
      base: $base,
      contrast: $contrast,
      trans: $trans,
    );
    @return $map;
  } @else if (isDeepest == true and isDeeper == true) {
    $map: (
      base: $base,
      contrast: $contrast,
      dark: $dark,
      darker: $darker,
      darkest: $darkest,
      light: $light,
      lighter: $lighter,
      lightest: $lightest,
      trans: $trans,
    );
    @return $map;
  } @else if (isDeeper == true) {
    $map: (
      base: $base,
      contrast: $contrast,
      dark: $dark,
      darker: $darker,
      light: $light,
      lighter: $lighter,
      trans: $trans,
    );
    @return $map;
  } @else {
    $map: (
      base: $base,
      contrast: $contrast,
      dark: $dark,
      light: $light,
      trans: $trans,
    );
    @return $map;
  }
}

@each $keys, $values in $us-color-global {
  $base: #000;
  $contrast: null;
  $dark: null;
  $darker: null;
  $darkest: null;
  $light: null;
  $lighter: null;
  $lightest: null;
  $trans: null;

  @each $key, $color in $values {
    @if ($key) {
      @if ($key == 'base') {
        $base: $color;
      } @else if ($key == 'contrast') {
        $contrast: $color;
      } @else if ($key == 'dark') {
        $dark: $color;
      } @else if ($key == 'darker') {
        $darker: $color;
      } @else if ($key == 'darkest') {
        $darkest: $color;
      } @else if ($key == 'light') {
        $light: $color;
      } @else if ($key == 'lighter') {
        $lighter: $color;
      } @else if ($key == 'lightest') {
        $lightest: $color;
      } @else if ($key == 'trans') {
        $trans: $color;
      }
    }
  }

  // Set default colors (if they aren't set by the user)
  @if ($contrast == null) {
    $contrast: #fff;
  }
  @if ($dark == null) {
    $dark: darken($base, $color-dark);
  }
  @if ($darker == null) {
    $darker: darken($base, $color-darker);
  }
  @if ($darkest == null) {
    $darkest: darken($base, $color-darkest);
  }
  @if ($light == null) {
    $light: lighten($base, $color-light);
  }
  @if ($lighter == null) {
    $lighter: lighten($base, $color-lighter);
  }
  @if ($lightest == null) {
    $lightest: lighten($base, $color-lightest);
  }
  @if ($trans == null) {
    $trans: transparentize($base, $color-opacity);
  }

  $us-colors: map-merge(
    $us-colors,
    (
      $keys:
        createColourMap(
          $base,
          $contrast,
          $dark,
          $darker,
          $darkest,
          $light,
          $lighter,
          $lightest,
          $trans
        ),
    )
  );
}

// Mixin
@function color($color-name: primary, $tone: base, $alpha: false) {
  @if ($alpha) {
    @return rgba(map-get(map-get($us-colors, $color-name), $tone), $alpha);
  }
  @if (map-get($us-colors, $color-name) == null) {
    @error "#{$color-name} isn't set inside us-color-settings";
  }
  @return map-get(map-get($us-colors, $color-name), $tone);
}
