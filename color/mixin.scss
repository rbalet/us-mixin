/*
Copy from Ionic Theme

-- Exemple --

h1 {
  border: color();
  color: color('primary', 'light');
  background: color('secondary', 'light', 0.5);
}
*/

$primary: #3880ff !default;
$secondary: #0cd1e8 !default;
$tertiary: #7044ff !default;
$success: #10dc60 !default;
$warning: #ffce00 !default;
$danger: #f04141 !default;
$light: #f4f5f8 !default;
$medium: #989aa2 !default;
$dark: #222428 !default;

$color-darken: 12% !default;
$color-lighten: 12% !default;
$color-opacity: 0.3 !default;

// @TODO Create a loop for that
$us-colors: (
  primary: (
    base: $primary,
    contrast: #fff,
    shade: darken($primary, $color-darken),
    tint: lighten($primary, $color-lighten),
    trans: transparentize($primary, $color-opacity),
  ),
  secondary: (
    base: $secondary,
    contrast: #fff,
    shade: darken($secondary, $color-darken),
    tint: lighten($secondary, $color-lighten),
    trans: transparentize($secondary, $color-opacity),
  ),
  tertiary: (
    base: $tertiary,
    contrast: #fff,
    shade: darken($tertiary, $color-darken),
    tint: lighten($tertiary, $color-lighten),
    trans: transparentize($tertiary, $color-opacity),
  ),
  success: (
    base: $success,
    contrast: #fff,
    shade: darken($success, $color-darken),
    tint: lighten($success, $color-lighten),
    trans: transparentize($tertiary, $color-opacity),
  ),
  warning: (
    base: $warning,
    contrast: #fff,
    shade: darken($warning, $color-darken),
    tint: lighten($warning, $color-lighten),
    trans: transparentize($tertiary, $color-opacity),
  ),
  danger: (
    base: $danger,
    contrast: #fff,
    shade: darken($danger, $color-darken),
    tint: lighten($danger, $color-lighten),
    trans: transparentize($tertiary, $color-opacity),
  ),
  light: (
    base: $light,
    contrast: #000,
    shade: darken($light, $color-darken),
    tint: lighten($light, $color-lighten),
    trans: transparentize($tertiary, $color-opacity),
  ),
  medium: (
    base: $medium,
    contrast: #fff,
    shade: darken($medium, $color-darken),
    tint: lighten($medium, $color-lighten),
    trans: transparentize($tertiary, $color-opacity),
  ),
  dark: (
    base: $dark,
    contrast: #fff,
    shade: darken($dark, $color-darken),
    tint: lighten($dark, $color-lighten),
    trans: transparentize($tertiary, $color-opacity),
  ),
) !default;

// Init class
@each $color, $tones in $us-colors {
  @each $tone, $value in $tones {
    @if ($tone == 'base') {
      // bg-primary for base color
      .bg-#{$color} {
        background-color: $value !important; // Override bootstrap value
        * {
          color: map-get(map-get($us-colors, $color), contrast);
        }
      }
      .color-#{$color} {
        color: $value !important;
      }
      .border-#{$color} {
        border-color: $value !important;
      }
      .fill-#{$color} {
        fill: $value !important;
      }
      .afterNBefore-#{$color} {
        &::before,
        &::after {
          background-color: $value !important;
        }
      }
    } @else {
      // bg-primary-light for shade
      .bg-#{$color}-#{$tone} {
        background-color: $value;
        * {
          color: map-get(map-get($us-colors, $color), contrast);
        }
      }
      .color-#{$color}-#{$tone} {
        color: $value;
      }
      .border-#{$color}-#{$tone} {
        border-color: $value;
      }
      .fill-#{$color}-#{$tone} {
        fill: $value;
      }
      .afterNBefore-#{$color}-#{$tone} {
        &::before,
        &::after {
          background-color: $value;
        }
      }
    }
  }
}

// Mixin
@function color($color-name: primary, $tone: base, $alpha: false) {
  @if ($alpha) {
    @return rgba(map-get(map-get($us-colors, $color-name), $tone), $alpha);
  }

  @return map-get(map-get($us-colors, $color-name), $tone);
}
