/* TODO: Improve this one

Colors vars have to look like this one, always need at least a 'base'
*/
// $colors: (
//   'primary': (
//     light: #ffa,
//     base: #ffb,
//     dark: #ffc,
//   ),
//   'secondary': (
//     light: #ffd,
//     base: #ffe,
//     dark: #fff,
//   ),
//   'default': (
//     success: #28a745,
//     danger: #dc3545,
//     warning: #ffc107,
//     dark: #343a40,
//     light: #fff,
//     muted: #6c757d,
//   ),
// );

@function color($color-name: primary, $tone: base, $alpha: false) {
  @if ($alpha) {
    @return rgba(map-get(map-get($colors, $color-name), $tone), $alpha);
  }

  @return map-get(map-get($colors, $color-name), $tone);
}

// Init class
@each $color, $tones in $colors {
  @each $tone, $value in $tones {
    @if ($tone == 'base') {
      // bg-primary for base color
      .bg-#{$color} {
        background-color: $value !important; // Override bootstrap value
      }
      .color-#{$color} {
        color: $value !important;
      }
      .border-#{$color} {
        border-color: $value !important;
      }
    } @else {
      // bg-primary-light for shade
      .bg-#{$color}-#{$tone} {
        background-color: $value;
      }
      .color-#{$color}-#{$tone} {
        color: $value;
      }
      .border-#{$color}-#{$tone} {
        border-color: $value;
      }
    }
  }
}

/* * Sample
h1 {
  border: color();
  color: color('primary', 'light');
  background: color('secondary', 'light', 0.5);
}
* */
